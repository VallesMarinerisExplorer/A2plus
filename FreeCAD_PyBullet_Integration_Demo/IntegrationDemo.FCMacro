import FreeCAD
import pybullet as p
import time
import os
# Get the FreeCAD object
obj = FreeCAD.ActiveDocument.getObject("Body")

# Get the current position and orientation of the FreeCAD object
position = obj.Placement.Base
rotation = obj.Placement.Rotation

# Convert FreeCAD rotation to pybullet quaternion
# FreeCAD uses (w, x, y, z) quaternion format
# pybullet uses (x, y, z, w) quaternion format
quaternion = [rotation.Q[0], rotation.Q[1], rotation.Q[2], rotation.Q[3]]

# Initialize pybullet
p.connect(p.DIRECT)  # Use p.GUI for a graphical interface

# Create a pybullet world
p.resetSimulation()

# Load the FreeCAD object's position and orientation into pybullet
box_id = p.loadURDF("C:\\Users\\" + str(os.getlogin()) + "\\T_Handle_Demo\\T_handle.urdf", basePosition=position, baseOrientation=quaternion)

# Set initial angular velocity
initial_angular_velocity = [3, -10, 1]  # Replace with your desired angular velocity [x, y, z]
p.resetBaseVelocity(box_id, linearVelocity=[0, 0, 0], angularVelocity=initial_angular_velocity)


i = 0
while i <= 300:

    new_position, new_quaternion = p.getBasePositionAndOrientation(box_id)
    
    rot = App.Rotation(new_quaternion[0],new_quaternion[1],new_quaternion[2],new_quaternion[3])    
    obj.Placement = FreeCAD.Placement(obj.Placement.Base, rot)

    FreeCAD.ActiveDocument.recompute()
    Gui.updateGui()
    # Wait until the document has been recomputed
    while "Recompute" in obj.State:
        pass
    p.stepSimulation()

    i += 1
